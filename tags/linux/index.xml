<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on home</title>
    <link>https://elecbrandy.github.io/tags/linux/</link>
    <description>Recent content in linux on home</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://elecbrandy.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[42cursus] born2beroot</title>
      <link>https://elecbrandy.github.io/posts/42cursus/circle_1/born2beroot/</link>
      <pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://elecbrandy.github.io/posts/42cursus/circle_1/born2beroot/</guid>
      <description>&lt;div class=&#34;series&#34;&gt;&#xA;  &lt;details&gt;&#xA;    &lt;summary&gt;📚 /42cursus&lt;/summary&gt;&#xA;    &lt;ul&gt;&#xA;      &#xA;      &#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_0/libft/&#34;&gt;libft&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/ft_printf/&#34;&gt;ft_printf&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/get_next_line/&#34;&gt;get_next_line&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/born2beroot/&#34;&gt;born2beroot&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/pipex/&#34;&gt;pipex&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/fdf/&#34;&gt;fdf&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/push_swap/&#34;&gt;push_swap&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_3/minishell/&#34;&gt;minishell&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_3/philosopher/&#34;&gt;philosopher&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_4/netpractice/&#34;&gt;netpractice&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;    &lt;/ul&gt;&#xA;  &lt;/details&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;br&gt;&#xA;&lt;h2 id=&#34;1-소개&#34;&gt;1. 소개&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;YOU CAN DO ANYTHING YOU WANT TO DO, VIRTUAL MACHINE, THIS IS YOUR WORLD&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;42서울 본과정 입과 후 네번째로 수행한 과제로, 가상머신에 리눅스를 설치하고 공부하는 과정이다. 가상머신에 리눅스(Debian or Rocky)를 설치하고, LVM를 통한 파티션 설정과 기타 여러가지 기능을 직접 실습한다. 요구사항이 상당히 많고 처음 접한다면 배워야할 개념도 상당히 많다. 리눅스 설치는 하다보면 10번 넘게 하다보니&amp;hellip; 중요한 개념 위주로만 정리했다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>File Descriptor</title>
      <link>https://elecbrandy.github.io/posts/cs101/etc/filedescriptor/</link>
      <pubDate>Sun, 24 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://elecbrandy.github.io/posts/cs101/etc/filedescriptor/</guid>
      <description>&lt;br&gt;&#xA;&lt;h2 id=&#34;1-소개&#34;&gt;1. 소개&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;리눅스 시스템에서는 모든 것이 파일로 취급된다. 파일뿐만 아니라 디바이스, 네트워크 연결, 디렉터리, 프로세스 역시 파일처럼 다룬다. 이때 시스템이 이러한 파일에 접근할 때 **파일 디스크립터(File Descriptor)**라는 개념을 사용한다. 파일 디스크립터는 비음수 정수(0 ~ OPEN_MAX)로, 운영 체제가 프로세스마다 부여하는 값이다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;파일 디스크립터는 프로세스에서 열린 파일들을 관리하는 테이블의 인덱스&lt;/strong&gt;이다. 예를 들어, 일반적으로 표준 입력(0), 표준 출력(1), 표준 오류(2)가 기본적으로 할당된다. FD 테이블의 각 항목은 파일 디스크립터에 대한 플래그와 파일 테이블을 가리키는 포인터를 포함하고 있으며, 이 포인터를 통해 시스템은 파일을 참조할 수 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LVM</title>
      <link>https://elecbrandy.github.io/posts/cs101/etc/lvm/</link>
      <pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://elecbrandy.github.io/posts/cs101/etc/lvm/</guid>
      <description>&lt;h1 id=&#34;lvm&#34;&gt;LVM&lt;/h1&gt;&#xA;&lt;h2 id=&#34;lvm이란&#34;&gt;LVM이란?&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Linux Volume Manager&lt;/li&gt;&#xA;&lt;li&gt;[[Linux]]에서 복잡한 스토리지 구성을 효율적으로 관리하기 위한 시스템&lt;/li&gt;&#xA;&lt;li&gt;물리적 디스크를 하나의 논리적 볼륨으로 결합할 수 있고, 볼륨의 크기를 쉽게 조정 가능&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;lvm-특징&#34;&gt;LVM 특징&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;기존 방식과 LVM 방식&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;기존 방식&#xA;&lt;ul&gt;&#xA;&lt;li&gt;[[File system]]이 물리적 블록장치와 직접 상호작용&lt;/li&gt;&#xA;&lt;li&gt;마운트된 파티션의 용량이 가득 차 이동 시&#xA;&lt;ul&gt;&#xA;&lt;li&gt;추가 디스크 장착&lt;/li&gt;&#xA;&lt;li&gt;추가된 디스크에 파티션 생성 및 포맷&lt;/li&gt;&#xA;&lt;li&gt;새로운 마운트 포인트(b)를 만들고 추가한 파티션 마운트&lt;/li&gt;&#xA;&lt;li&gt;기존 데이터를 (b)에 이동&lt;/li&gt;&#xA;&lt;li&gt;기존 파티션 언마운트 후 새 포인트와 연결&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;LVM 방식&#xA;&lt;ul&gt;&#xA;&lt;li&gt;[[File system]]이 LVM이 만든 가상의 블록 장치에 상호작용함&lt;/li&gt;&#xA;&lt;li&gt;실제 블록 장치를 추상화하여 더 유연한 접근이 가능함&lt;/li&gt;&#xA;&lt;li&gt;마운트된 파티션의 용량이 가득 차 이동 시&#xA;&lt;ul&gt;&#xA;&lt;li&gt;추가 디스크 장착&lt;/li&gt;&#xA;&lt;li&gt;추가 디스크에 Partition을 만들고 pv 초기화&lt;/li&gt;&#xA;&lt;li&gt;pv를 vg에 추가하고 해당 논리 볼륨 사이즈 증가&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;lvm-단위-구성&#34;&gt;LVM 단위 구성&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;PV&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Physical Volume&lt;/li&gt;&#xA;&lt;li&gt;LVM에서 블록장치에 접근하기 위해서 PV로 초기화가 필요&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;PE&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Physical Extent&lt;/li&gt;&#xA;&lt;li&gt;PV를 구성하는 일정한 크기의 블록으로 LVM2에서 기본 크기가 4MB&lt;/li&gt;&#xA;&lt;li&gt;LV의 LE와 1:1로 대응&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;VG&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Volume Group&lt;/li&gt;&#xA;&lt;li&gt;PV들의 집합으로 LV를 할당할 수 있는 공간&lt;/li&gt;&#xA;&lt;li&gt;PV로 초기화된 장치들은 VG로 통합됨&lt;/li&gt;&#xA;&lt;li&gt;사용자는 VG 안에서 유연성 높게 공간을 쪼개 LV 생성 가능&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LV&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Logical Volume&lt;/li&gt;&#xA;&lt;li&gt;사용자가 최종적으로 다루게 되는 논리적 스토리지&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LV의 유형&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Linear LV&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;선형으로 PV를 모아 LV로 만드는 방법&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Striped LV&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;대량의 순차적 읽기/쓰기 작업의 경우 효율적으로 높일 수 있음&lt;/li&gt;&#xA;&lt;li&gt;선형이 아니라 여러 PV에 번갈아가며 기록하는 방법&lt;/li&gt;&#xA;&lt;li&gt;결국 분산기록이며, 읽고 쓰기가 병렬로 실행 가능&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Mirrored LV&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;블록 장치에 저장된 데이터의 복사본을 다른 블록 장치에 저장하는 방식&lt;/li&gt;&#xA;&lt;li&gt;백업에 용이함&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LE&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;LV를 구성하는 일정한 크기의 블록으로 PE와 마찬가지로 4MB&lt;/li&gt;&#xA;&lt;li&gt;각각의 LV들은 PE들과 1:1로 맵핑됨&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://tech.cloud.nongshim.co.kr/2018/11/23/lvmlogical-volume-manager-1-%EA%B0%9C%EB%85%90/&#34;&gt;https://tech.cloud.nongshim.co.kr/2018/11/23/lvmlogical-volume-manager-1-%EA%B0%9C%EB%85%90/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://nayoungs.tistory.com/entry/Linux-LVMLogical-Volume-Manage-PV-VG-LV&#34;&gt;https://nayoungs.tistory.com/entry/Linux-LVMLogical-Volume-Manage-PV-VG-LV&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
