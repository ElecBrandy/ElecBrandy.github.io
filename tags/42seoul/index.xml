<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>42Seoul on Elecbrandy</title>
    <link>https://elecbrandy.github.io/tags/42seoul/</link>
    <description>Recent content in 42Seoul on Elecbrandy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://elecbrandy.github.io/tags/42seoul/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[42cursus] Born2beroot</title>
      <link>https://elecbrandy.github.io/posts/42cursus/born2beroot/</link>
      <pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://elecbrandy.github.io/posts/42cursus/born2beroot/</guid>
      <description>YOU CAN DO ANYTHING YOU WANT TO DO, VIRTUAL MACHINE, THIS IS YOUR WORLD 42서울 본과정 입과 후 네번째로 수행한 과제로, 가상머신에 리눅스를 설치하고 공부하는 과정이다.&#xA;01 소개 가상머신에 리눅스(Debian or Rocky)를 설치하고, LVM를 통한 파티션 설정과 기타 여러가지 기능을 직접 실습한다. 백문불여일견. 요구사항이 상당히 많고 처음 접한다면 배워야할 개념도 상당히 많다&amp;hellip; 화이팅! 리눅스 설치는 하다보면 100번이라도 해야만 하는 상황이기 때문에 중요한 개념 위주로만 정리했다.&#xA;02 Born2beroot 개념정리 운영체제 Operating System은 응용 프로그램 또는 사용자에게 컴퓨터 자원을 사용할 수 있는 인터페이스를 제공하고, 그 결과를 돌려주는 시스템 소프트웨어이다.</description>
    </item>
    <item>
      <title>LVM</title>
      <link>https://elecbrandy.github.io/posts/42cursus/lvm/</link>
      <pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://elecbrandy.github.io/posts/42cursus/lvm/</guid>
      <description>LVM LVM이란? Linux Volume Manager [[Linux]]에서 복잡한 스토리지 구성을 효율적으로 관리하기 위한 시스템 물리적 디스크를 하나의 논리적 볼륨으로 결합할 수 있고, 볼륨의 크기를 쉽게 조정 가능 LVM 특징 기존 방식과 LVM 방식 기존 방식 [[File system]]이 물리적 블록장치와 직접 상호작용 마운트된 파티션의 용량이 가득 차 이동 시 추가 디스크 장착 추가된 디스크에 파티션 생성 및 포맷 새로운 마운트 포인트(b)를 만들고 추가한 파티션 마운트 기존 데이터를 (b)에 이동 기존 파티션 언마운트 후 새 포인트와 연결 LVM 방식 [[File system]]이 LVM이 만든 가상의 블록 장치에 상호작용함 실제 블록 장치를 추상화하여 더 유연한 접근이 가능함 마운트된 파티션의 용량이 가득 차 이동 시 추가 디스크 장착 추가 디스크에 Partition을 만들고 pv 초기화 pv를 vg에 추가하고 해당 논리 볼륨 사이즈 증가 LVM 단위 구성 PV Physical Volume LVM에서 블록장치에 접근하기 위해서 PV로 초기화가 필요 PE Physical Extent PV를 구성하는 일정한 크기의 블록으로 LVM2에서 기본 크기가 4MB LV의 LE와 1:1로 대응 VG Volume Group PV들의 집합으로 LV를 할당할 수 있는 공간 PV로 초기화된 장치들은 VG로 통합됨 사용자는 VG 안에서 유연성 높게 공간을 쪼개 LV 생성 가능 LV Logical Volume 사용자가 최종적으로 다루게 되는 논리적 스토리지 LV의 유형 Linear LV 선형으로 PV를 모아 LV로 만드는 방법 Striped LV 대량의 순차적 읽기/쓰기 작업의 경우 효율적으로 높일 수 있음 선형이 아니라 여러 PV에 번갈아가며 기록하는 방법 결국 분산기록이며, 읽고 쓰기가 병렬로 실행 가능 Mirrored LV 블록 장치에 저장된 데이터의 복사본을 다른 블록 장치에 저장하는 방식 백업에 용이함 LE LV를 구성하는 일정한 크기의 블록으로 PE와 마찬가지로 4MB 각각의 LV들은 PE들과 1:1로 맵핑됨 Reference https://tech.</description>
    </item>
    <item>
      <title>[42cursus] GET_NEXT_LINE</title>
      <link>https://elecbrandy.github.io/posts/42cursus/get_next_line/</link>
      <pubDate>Mon, 18 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://elecbrandy.github.io/posts/42cursus/get_next_line/</guid>
      <description>Reading a line on a fd is way too tedious 42서울 본과정 입과 후 세번째로 수행한 과제로, 파일 디스크립터로부터 읽혀진 - 개행으로 끝나는 한 줄을 반환하는 함수를 만드는 과제이다. 즉 파일 하나를 연 다음, 파일 내용에서 개행으로 끝나는 줄 하나를 반환해야한다.&#xA;01 소개 파일을 열고, 지정된 BUFFER_SIZE 만큼 read함수를 통해 파일을 읽다가 개행문자 \n이 나타나면 개행문자 전까지만 반환한다.&#xA;02 GET_NEXT_LINE 명세서 PROTOTYPE char *get_next_line(int fd); PARAMETER int fd : 읽어들일 파일의 디스크립터 DESCRIPTION Mandatory part 호출마다 한 번에 한 줄씩 파일 디스크립터가 가리키는 파일을 읽어온다.</description>
    </item>
    <item>
      <title>[42cursus] FT_PRINTF</title>
      <link>https://elecbrandy.github.io/posts/42cursus/ft_printf/</link>
      <pubDate>Wed, 15 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://elecbrandy.github.io/posts/42cursus/ft_printf/</guid>
      <description>putnbr and putstr aren’t enough&#xA;42서울 본과정 입과 후 두번째로 수행한 과제로, 말 그대로 C언어의 printf 함수를 재현하는 과제이다. bonus는 수행하지 않았고, 기본적인 내용만 구현하다보니 생각보다 난이도가 쉬웠던 것 같다.&#xA;01 소개 libc의 printf 함수를 재구현해야 하며, 실제 printf처럼 버퍼 관리를 수행해서는 안 된다. 서식 지정자 cspdiuxX%를 구현해야한다.&#xA;02 FT_PRINTF 명세서 PROTOTYPE int ft_printf(const char *str, ...); PARAMETER const char *str : format 이라는 이름의 문자열 상수 (서식 문자열) .</description>
    </item>
    <item>
      <title>[42cursus] LIBFT</title>
      <link>https://elecbrandy.github.io/posts/42cursus/libft/</link>
      <pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://elecbrandy.github.io/posts/42cursus/libft/</guid>
      <description>Your very first own library Libft 42서울 본과정 입과 후 첫번째로 만나는 과제로 앞으로 본과정에서 사용할 라이브러리를 만드는 것이 목표이다. 이후 과제를 수행하며 자주 사용할 함수들이 몇가지 있기 때문에 최대한 범용성 높게 - 커스텀하기 쉽게 만드는 것을 목표로 했다. 항상 느끼는 것이지만 norm 규칙의 첫번째 목표는 카뎃이 다른 카뎃의 코드를 보았을 때 최소한의 일관성을 유지하여 쉽게 읽을 수 있게 하는 것&amp;hellip; 이고 두번째는 코드 길이를 적당히 조절함으로써 자연스럽게 모듈화를 하게 하는 것.</description>
    </item>
  </channel>
</rss>
