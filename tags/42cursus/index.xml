<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>42cursus on home</title>
    <link>https://elecbrandy.github.io/tags/42cursus/</link>
    <description>Recent content in 42cursus on home</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://elecbrandy.github.io/tags/42cursus/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[42cursus] netpractice</title>
      <link>https://elecbrandy.github.io/posts/42cursus/circle_4/netpractice/</link>
      <pubDate>Thu, 15 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://elecbrandy.github.io/posts/42cursus/circle_4/netpractice/</guid>
      <description>&lt;div class=&#34;series&#34;&gt;&#xA;  &lt;details&gt;&#xA;    &lt;summary&gt;📚 /42cursus&lt;/summary&gt;&#xA;    &lt;ul&gt;&#xA;      &#xA;      &#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_0/libft/&#34;&gt;libft&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/ft_printf/&#34;&gt;ft_printf&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/get_next_line/&#34;&gt;get_next_line&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/born2beroot/&#34;&gt;born2beroot&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/pipex/&#34;&gt;pipex&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/fdf/&#34;&gt;fdf&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/push_swap/&#34;&gt;push_swap&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_3/minishell/&#34;&gt;minishell&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_3/philosopher/&#34;&gt;philosopher&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_4/netpractice/&#34;&gt;netpractice&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;    &lt;/ul&gt;&#xA;  &lt;/details&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;br&gt;&#xA;&lt;h2 id=&#34;1-소개&#34;&gt;1. 소개&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;This document is a System Administration related exercise.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;42서울 본과정 입과 후 n번째로 수행한 과제로, 교육 인터페이스상에서 소규모 네트워크를 구성하는 과제이다. 네트워킹 문제를 해결하여 네트워크가 실행되도록 만들어야 한다. 총 10개의 문제를 완료하고, Git 저장소에 제출하는 것이 최종 목표이다.&lt;/p&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&lt;h2 id=&#34;2-개념-정리&#34;&gt;2. 개념 정리&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-1-네트워크란&#34;&gt;2-1. 네트워크란?&lt;/h3&gt;&#xA;&lt;p&gt;네트워크는 두 대 이상의 컴퓨터 시스템이 서로 연결되어 데이터를 교환할 수 있는 구조를 의미한다. 이 연결은 다양한 방법으로 이루어질 수 있으며, 물리적 케이블, 무선 신호, 또는 혼합된 방식으로 네트워크를 구성할 수 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[42cursus] minishell</title>
      <link>https://elecbrandy.github.io/posts/42cursus/circle_3/minishell/</link>
      <pubDate>Tue, 04 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://elecbrandy.github.io/posts/42cursus/circle_3/minishell/</guid>
      <description>&lt;div class=&#34;series&#34;&gt;&#xA;  &lt;details&gt;&#xA;    &lt;summary&gt;📚 /42cursus&lt;/summary&gt;&#xA;    &lt;ul&gt;&#xA;      &#xA;      &#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_0/libft/&#34;&gt;libft&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/ft_printf/&#34;&gt;ft_printf&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/get_next_line/&#34;&gt;get_next_line&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/born2beroot/&#34;&gt;born2beroot&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/pipex/&#34;&gt;pipex&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/fdf/&#34;&gt;fdf&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/push_swap/&#34;&gt;push_swap&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_3/minishell/&#34;&gt;minishell&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_3/philosopher/&#34;&gt;philosopher&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_4/netpractice/&#34;&gt;netpractice&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;    &lt;/ul&gt;&#xA;  &lt;/details&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;draft = true&lt;/p&gt;&#xA;&lt;br&gt;&#xA;&lt;h1 id=&#34;1-소개&#34;&gt;1. 소개&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;As beautiful as a shell&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;42서울 본과정 입과 후 여덟번째로 수행한 과제로, 작은 크기의 shell을 구현하는 과제이다. 우리는 이제 간단한 빌트인 함수부터 여러 명령어를 수행할 수 있는 &lt;strong&gt;minishell&lt;/strong&gt;을 만들어야 한다. 너무 큰 shell을 만들기 위해서 노력하다가 블랙홀에 빠지지 않게 조심하자!&lt;/p&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&lt;h2 id=&#34;2-minishell-명세서&#34;&gt;2. minishell 명세서&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;PROGRAM NAME&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;minishell&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;PARAMETER&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;commands...&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;DESCRIPTION&lt;/strong&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;명령 대기 중 프롬프트 표시&lt;/strong&gt;: 새 명령을 기다릴 때 프롬프트를 표시해야함!&lt;/p&gt;</description>
    </item>
    <item>
      <title>[42cursus] pipex</title>
      <link>https://elecbrandy.github.io/posts/42cursus/circle_2/pipex/</link>
      <pubDate>Wed, 28 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://elecbrandy.github.io/posts/42cursus/circle_2/pipex/</guid>
      <description>&lt;div class=&#34;series&#34;&gt;&#xA;  &lt;details&gt;&#xA;    &lt;summary&gt;📚 /42cursus&lt;/summary&gt;&#xA;    &lt;ul&gt;&#xA;      &#xA;      &#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_0/libft/&#34;&gt;libft&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/ft_printf/&#34;&gt;ft_printf&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/get_next_line/&#34;&gt;get_next_line&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/born2beroot/&#34;&gt;born2beroot&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/pipex/&#34;&gt;pipex&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/fdf/&#34;&gt;fdf&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/push_swap/&#34;&gt;push_swap&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_3/minishell/&#34;&gt;minishell&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_3/philosopher/&#34;&gt;philosopher&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_4/netpractice/&#34;&gt;netpractice&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;    &lt;/ul&gt;&#xA;  &lt;/details&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;br&gt;&#xA;&lt;h2 id=&#34;1-소개&#34;&gt;1. 소개&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Cristina: &amp;ldquo;Go dance salsa somewhere :)&amp;rdquo;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;42서울 본과정 입과 후 다섯번째로 수행한 과제로, UNIX 동작 원리를 프로그래밍을 통해 상세히 파헤쳐보는 과제이다. Shell에서의 파이프를 구현하는 과제이며 Redriection, File discriptor, Process, Pipe, Fork 등을 공부할 수 있다.&lt;/p&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&lt;h2 id=&#34;2-pipex-명세서&#34;&gt;2. pipex 명세서&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-1-mandatory-part&#34;&gt;2-1. Mandatory part&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;pipex&lt;/code&gt;는 &lt;code&gt;./pipex file1 cmd1 cmd2 file2&lt;/code&gt; 형태로 실행된다.&lt;/li&gt;&#xA;&lt;li&gt;file1과 file2는 파일 이름이다.&lt;/li&gt;&#xA;&lt;li&gt;cmd1과 cmd2는 매개 변수가 존재하는 쉘 명령어이다.&lt;/li&gt;&#xA;&lt;li&gt;프로그램은 &lt;code&gt;&amp;lt; file1 cmd1 | cmd2 &amp;gt; file2&lt;/code&gt; 명령과 동일하게 작동해야 한다.&lt;/li&gt;&#xA;&lt;li&gt;즉, file1을 input으로 받아 cmd1를 실행하고, 그 결과를 파이프를 통해 cmd2로 넘긴 후 output인 file2로 내보낸다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-2-bonus-part&#34;&gt;2-2. Bonus part&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Bonus part&lt;/code&gt; 에서는 다중 파이프와 here_doc를 구현해야 한다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;다중 파이프&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;pipex : &lt;code&gt;./pipex file1 cmd1 cmd2 cmd3 ... cmdn file2&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;bash : &lt;code&gt;&amp;lt; file1 cmd1 | cmd2 | cmd3 ... | cmdn &amp;gt; file2&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;here_doc&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;pipex : &lt;code&gt;./pipex here_doc LIMITER cmd cmd1 file&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;bash : &lt;code&gt;cmd &amp;lt;&amp;lt; LIMITER | cmd1 &amp;gt;&amp;gt; file&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&lt;h2 id=&#34;3-개념-정리&#34;&gt;3. 개념 정리&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-1-redirection&#34;&gt;3-1. Redirection&lt;/h3&gt;&#xA;&lt;p&gt;redirection은 shell에서 입력과 출력의 흐름을 재지정하는 프로세스이다. 기본적으로 커맨드는 표준 입력(stdin), 표준 출력(stdout), 그리고 표준 에러(stderr)라는 세 가지 주요 통신 채널을 사용한다. 리디렉션을 사용하면 이러한 통신 채널을 파일이나 다른 프로그램으로 전환할 수 있다. 유닉스 및 리눅스 기반 시스템에서 매우 강력한 도구로 시스템 관리, 스크립팅 및 데이터 관리에 유용하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[42cursus] push_swap</title>
      <link>https://elecbrandy.github.io/posts/42cursus/circle_2/push_swap/</link>
      <pubDate>Mon, 12 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://elecbrandy.github.io/posts/42cursus/circle_2/push_swap/</guid>
      <description>&lt;div class=&#34;series&#34;&gt;&#xA;  &lt;details&gt;&#xA;    &lt;summary&gt;📚 /42cursus&lt;/summary&gt;&#xA;    &lt;ul&gt;&#xA;      &#xA;      &#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_0/libft/&#34;&gt;libft&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/ft_printf/&#34;&gt;ft_printf&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/get_next_line/&#34;&gt;get_next_line&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/born2beroot/&#34;&gt;born2beroot&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/pipex/&#34;&gt;pipex&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/fdf/&#34;&gt;fdf&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/push_swap/&#34;&gt;push_swap&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_3/minishell/&#34;&gt;minishell&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_3/philosopher/&#34;&gt;philosopher&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_4/netpractice/&#34;&gt;netpractice&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;    &lt;/ul&gt;&#xA;  &lt;/details&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;br&gt;&#xA;&lt;h2 id=&#34;1-소개&#34;&gt;1. 소개&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Because Swap_push isn’t as natural&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;42서울 본과정 입과 후 네번째로 수행한 과제로, 스택에 있는 데이터를 한정된 명령어를 이용하여 최대한 적은 횟수 내에 정렬하는 것을 목표로 하는 과제이다.&#xA;상당히 아이러니한 과제이다. 스택이라고 명시되어있지만, 과제에서 요구하는 구조는 스택과는 거리가 멀고, 명령어도 한정되어있다.&lt;/p&gt;&#xA;&lt;p&gt;또한 정렬 시 복잡도를 고려하는 것이 아니라 명령어 갯수만 어떻게든 줄여서 출력하면 ok를 받을 수 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[42cursus] born2beroot</title>
      <link>https://elecbrandy.github.io/posts/42cursus/circle_1/born2beroot/</link>
      <pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://elecbrandy.github.io/posts/42cursus/circle_1/born2beroot/</guid>
      <description>&lt;div class=&#34;series&#34;&gt;&#xA;  &lt;details&gt;&#xA;    &lt;summary&gt;📚 /42cursus&lt;/summary&gt;&#xA;    &lt;ul&gt;&#xA;      &#xA;      &#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_0/libft/&#34;&gt;libft&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/ft_printf/&#34;&gt;ft_printf&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/get_next_line/&#34;&gt;get_next_line&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/born2beroot/&#34;&gt;born2beroot&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/pipex/&#34;&gt;pipex&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/fdf/&#34;&gt;fdf&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/push_swap/&#34;&gt;push_swap&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_3/minishell/&#34;&gt;minishell&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_3/philosopher/&#34;&gt;philosopher&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_4/netpractice/&#34;&gt;netpractice&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;    &lt;/ul&gt;&#xA;  &lt;/details&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;br&gt;&#xA;&lt;h2 id=&#34;1-소개&#34;&gt;1. 소개&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;YOU CAN DO ANYTHING YOU WANT TO DO, VIRTUAL MACHINE, THIS IS YOUR WORLD&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;42서울 본과정 입과 후 네번째로 수행한 과제로, 가상머신에 리눅스를 설치하고 공부하는 과정이다. 가상머신에 리눅스(Debian or Rocky)를 설치하고, LVM를 통한 파티션 설정과 기타 여러가지 기능을 직접 실습한다. 요구사항이 상당히 많고 처음 접한다면 배워야할 개념도 상당히 많다. 리눅스 설치는 하다보면 10번 넘게 하다보니&amp;hellip; 중요한 개념 위주로만 정리했다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[42cursus] get_next_line</title>
      <link>https://elecbrandy.github.io/posts/42cursus/circle_1/get_next_line/</link>
      <pubDate>Mon, 18 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://elecbrandy.github.io/posts/42cursus/circle_1/get_next_line/</guid>
      <description>&lt;div class=&#34;series&#34;&gt;&#xA;  &lt;details&gt;&#xA;    &lt;summary&gt;📚 /42cursus&lt;/summary&gt;&#xA;    &lt;ul&gt;&#xA;      &#xA;      &#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_0/libft/&#34;&gt;libft&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/ft_printf/&#34;&gt;ft_printf&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/get_next_line/&#34;&gt;get_next_line&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/born2beroot/&#34;&gt;born2beroot&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/pipex/&#34;&gt;pipex&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/fdf/&#34;&gt;fdf&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/push_swap/&#34;&gt;push_swap&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_3/minishell/&#34;&gt;minishell&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_3/philosopher/&#34;&gt;philosopher&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_4/netpractice/&#34;&gt;netpractice&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;    &lt;/ul&gt;&#xA;  &lt;/details&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;br&gt;&#xA;&lt;h2 id=&#34;1-소개&#34;&gt;1. 소개&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Reading a line on a fd is way too tedious&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;42서울 본과정 입과 후 세번째로 수행한 과제로, 파일 디스크립터로부터 읽혀진 - 개행으로 끝나는 한 줄을 반환하는 함수를 만드는 과제이다. 즉 파일 하나를 연 다음, 파일 내용에서 개행으로 끝나는 줄 하나를 반환해야한다. 파일을 열고, 지정된 &lt;strong&gt;BUFFER_SIZE&lt;/strong&gt; 만큼 &lt;code&gt;read&lt;/code&gt;함수를 통해 파일을 읽다가 개행문자 &lt;code&gt;\n&lt;/code&gt;이 나타나면 개행문자 전까지만 반환한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[42cursus] ft_printf</title>
      <link>https://elecbrandy.github.io/posts/42cursus/circle_1/ft_printf/</link>
      <pubDate>Wed, 15 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://elecbrandy.github.io/posts/42cursus/circle_1/ft_printf/</guid>
      <description>&lt;div class=&#34;series&#34;&gt;&#xA;  &lt;details&gt;&#xA;    &lt;summary&gt;📚 /42cursus&lt;/summary&gt;&#xA;    &lt;ul&gt;&#xA;      &#xA;      &#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_0/libft/&#34;&gt;libft&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/ft_printf/&#34;&gt;ft_printf&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/get_next_line/&#34;&gt;get_next_line&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/born2beroot/&#34;&gt;born2beroot&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/pipex/&#34;&gt;pipex&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/fdf/&#34;&gt;fdf&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/push_swap/&#34;&gt;push_swap&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_3/minishell/&#34;&gt;minishell&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_3/philosopher/&#34;&gt;philosopher&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_4/netpractice/&#34;&gt;netpractice&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;    &lt;/ul&gt;&#xA;  &lt;/details&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;br&gt;&#xA;&lt;h2 id=&#34;1-소개&#34;&gt;1. 소개&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;putnbr and putstr aren’t enough&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;42서울 본과정 입과 후 두번째로 수행한 과제로, 말 그대로 C언어의 &lt;code&gt;printf&lt;/code&gt; 함수를 재현하는 과제이다. bonus는 수행하지 않았고, 기본적인 내용만 구현하다보니 생각보다 난이도가 쉬웠던 것 같다. libc의 &lt;code&gt;printf&lt;/code&gt; 함수를 재구현해야 하며, 실제 &lt;code&gt;printf&lt;/code&gt;처럼 버퍼 관리를 수행해서는 안 된다. 서식 지정자 &lt;code&gt;cspdiuxX%&lt;/code&gt;를 구현해야한다.&lt;/p&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&lt;h2 id=&#34;2-ft_printf-명세서&#34;&gt;2. ft_printf 명세서&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;PROTOTYPE&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;int ft_printf(const char *str, ...);&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;PARAMETER&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;const char *str&lt;/code&gt; : format 이라는 이름의 문자열 상수 (서식 문자열)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;...&lt;/code&gt; : 생략 기호로, 두번째 이후 인수부터는 인수의 개수와 타입을 점검하지 않으며, 컴파일러는 이후의 인수에 대해서 개수, 타입에 상관없이 그대로 함수에 넘겨줌&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;DESCRIPTION&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;%c&lt;/code&gt; 단일 문자를 인쇄&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;%s&lt;/code&gt; 문자열을 인쇄&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;%p&lt;/code&gt; void * 포인터 인수는 16진수 형식으로 인쇄&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;%d&lt;/code&gt; 십진수(기본 10)를 인쇄&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;%i&lt;/code&gt; 기본 10의 정수를 인쇄&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;%u&lt;/code&gt; 부호 없는 10진수(베이스 10)를 인쇄&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;%x&lt;/code&gt; 16진수(베이스 16) 소문자 형식으로 숫자를 인쇄&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;%X&lt;/code&gt; 16진수(베이스 16) 대문자 형식으로 숫자를 인쇄&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;%%&lt;/code&gt; 백분율 기호를 인쇄&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;External functs&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;malloc, free, write&lt;/li&gt;&#xA;&lt;li&gt;va_start, va_arg, va_copy, va_end&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;RETURN VALUES&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;Upon successful return, these functions return the number of characters printed (excluding the null byte used to end output to strings).&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;성공적으로 반환되면, 이 함수들은 인쇄된 문자 수를 반환합니다.(출력을 끝내는 데 사용되는 널 바이트 제외) 문자열을 반환함&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&lt;h2 id=&#34;3-개념-정리&#34;&gt;3. 개념 정리&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-1-가변인자&#34;&gt;3-1. 가변인자&lt;/h3&gt;&#xA;&lt;p&gt;가변인자 다루는 것에 중점을 둔 과제인 만큼, &lt;code&gt;va_&lt;/code&gt; 함수를 통해 가변인자를 통제하는 방법을 알아야한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[42cursus] libft</title>
      <link>https://elecbrandy.github.io/posts/42cursus/circle_0/libft/</link>
      <pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://elecbrandy.github.io/posts/42cursus/circle_0/libft/</guid>
      <description>&lt;div class=&#34;series&#34;&gt;&#xA;  &lt;details&gt;&#xA;    &lt;summary&gt;📚 /42cursus&lt;/summary&gt;&#xA;    &lt;ul&gt;&#xA;      &#xA;      &#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_0/libft/&#34;&gt;libft&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/ft_printf/&#34;&gt;ft_printf&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/get_next_line/&#34;&gt;get_next_line&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_1/born2beroot/&#34;&gt;born2beroot&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/pipex/&#34;&gt;pipex&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/fdf/&#34;&gt;fdf&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_2/push_swap/&#34;&gt;push_swap&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_3/minishell/&#34;&gt;minishell&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_3/philosopher/&#34;&gt;philosopher&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;https://elecbrandy.github.io/posts/42cursus/circle_4/netpractice/&#34;&gt;netpractice&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;    &lt;/ul&gt;&#xA;  &lt;/details&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;br&gt;&#xA;&lt;h2 id=&#34;1-소개&#34;&gt;1. 소개&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Your very first own library&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;42서울 본과정 입과 후 첫번째로 만나는 과제로 앞으로 본과정에서 사용할 라이브러리를 만드는 것이 목표이다.&#xA;이후 과제를 수행하며 자주 사용할 함수들이 몇가지 있기 때문에 최대한 범용성 높게 - 커스텀하기 쉽게 만드는 것을 목표로 했다.&#xA;항상 느끼는 것이지만 &lt;code&gt;norm&lt;/code&gt; 규칙의 첫번째 목표는 카뎃이 다른 카뎃의 코드를 보았을 때 최소한의 일관성을 유지하여 쉽게 읽을 수 있게 하는 것&amp;hellip; 이고&#xA;두번째는 코드 길이를 적당히 조절함으로써 자연스럽게 모듈화를 하게 하는 것. 그 이상의 의미는 두지 않기로 했다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
